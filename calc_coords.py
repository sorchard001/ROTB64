import math

# number of angles to calculate
NRAYS = 32
# number of extra rows to produce at each end of table
# (to allow table lookup + offset without falling off end of table)
EXTRA = 2
# radial size of screen in pixels
RX = 70
RY = 49
# centre of screen in pixels including offset for size of sprite
XOFF = 58
YOFF = 38
# scale factor to convert pixels to coords
SCX = 64
SCY = 32


fo = open('coords.asm', 'w')
fo.write('; coords.asm generated by calc_coords.py\n')


for i in range(-EXTRA, NRAYS+EXTRA):

    th = 2*math.pi*i/NRAYS

    # use sin & cos (instead of tan) to get 4 quadrant information
    sn = -math.sin(th)
    cs = math.cos(th)
    
    # calculate intersection with top or bottom edge
    try:
        x0 = abs(RY*cs/sn)
    except ZeroDivisionError:
        x0 = float('inf')

    # calculate intersection with left or right edge
    try:
        y0 = abs(RX*sn/cs)
    except ZeroDivisionError:
        y0 = float('inf')

    # clip coords to screen edges

    # if y is somewhere within top/bottom edges then force x to left/right
    if (y0 <= RY):
        x = RX
    else:
        x = x0

    # if x is somewhere within left/right edges then force y to top/bottom
    if (x0 <= RX):
        y = RY
    else:
        y = y0

    # apply quadrant, offset & scale
    x = (XOFF + math.copysign(x, cs))*SCX
    y = (YOFF + math.copysign(y, sn))*SCY

    # output symbol for table start address
    if (i == 0):
        fo.write('form_coords\n')

    fo.write('\tfdb {}, {}\n'.format(int(x), int(y)))

fo.write('; end coords.asm\n')
fo.close()

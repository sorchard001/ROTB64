#! /usr/bin/python3

import math

# centre of screen in pixels
XOFF = 64
YOFF = 44
# radial size of screen in pixels
RX = 64
RY = 44
# scale factor to convert pixels to coords
SCX = 64
SCY = 32

# writecoords
#  fo         : output file
#  tablename  : symbol inserted before direction 0
#  directions : number of angles
#  extradirs  : number of duplicated entries at each end of table
#  szx, szy   : offset to adjust for size of sprite

def writecoords(fo, tablename, directions, extradirs, szx, szy):

    # get radial distance to centre of sprite just off screen
    rrx = RX + (0.5*szx)
    rry = RY + (0.5*szy)

    fo.write('\n');

    for i in range(-extradirs, directions + extradirs):

        th = 2*math.pi*i/directions

        # use sin & cos (instead of tan) to get 4 quadrant information
        sn = -math.sin(th)
        cs = math.cos(th)

        # calculate intersection with top or bottom edge
        try:
            x0 = abs(rry*cs/sn)
        except ZeroDivisionError:
            x0 = float('inf')

        # calculate intersection with left or right edge
        try:
            y0 = abs(rrx*sn/cs)
        except ZeroDivisionError:
            y0 = float('inf')

        # clip coords to screen edges

        # if y is somewhere within top/bottom edges then force x to left/right
        if (y0 <= rry):
            x = rrx
        else:
            x = x0

        # if x is somewhere within left/right edges then force y to top/bottom
        if (x0 <= rrx):
            y = rry
        else:
            y = y0

        # apply quadrant, offset & scale
        x = (XOFF - (szx*0.5) + math.copysign(x, cs))*SCX
        y = (YOFF - (szy*0.5) + math.copysign(y, sn))*SCY

        # output symbol for table start address
        if (i == 0):
            fo.write(tablename + '\n')

        fo.write('\tfdb {}, {}\n'.format(int(x), int(y)))

    fo.write('\n');

#

f = open('coords.asm', 'w')
f.write('; coords.asm generated by calc_coords.py\n')

writecoords(f, 'form_coords', 32, 2, 12, 12)
writecoords(f, 'boss_coords', 16, 0, 24, 24)

f.write('; end coords.asm\n')
f.close()
